{"version":3,"sources":["../../src/utils.ts","../../src/BSForm.tsx","../../src/useForm.ts","App.tsx","index.tsx"],"names":["validations","noEmpty","val","lessThan","greaterThan","equalTo","lengthEquals","lengthLessThan","lengthGreaterThan","WrappedInput","name","props","schema","value","formValues","error","other","renderValue","x","React","className","type","invalid","key","check","checked","style","marginBottom","marginTop","placeholder","Form","submitCallback","layout","form","disabled","actions","actionName","actionsTop","formErrors","onChange","onSubmit","processedLayout","row","processRow","width","fullWidth","item","buttons","color","marginRight","action","onClick","i","rows","fieldName","md","flatifyValues","obj","flatVals","Object","k","v","flatified","kk","vv","nestifyValues","nestedValues","splitted","latestObj","tmp","useForm","_setFormValues","resetValues","setResetValues","setFormErrors","setSchema","dirty","setDirty","validateAndSetErrors","errs","validation","validationFuncs","validationAnd","fieldValidation","setFormValues","ev","valProcessor","valueProcessor","callback","filtered","f","updateForm","resetForm","label","required","age","height","address","gender","options","hairLength","displayCondition","otherValues","fileAttachments","App","console","warn","Row","Col","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fc86690.chunk.js","sourcesContent":["import {\n    Validation,\n    DisplayCondition,\n} from './types';\n\nexport const validationOr = (...validationFuncs: Validation<any>[]) => (val: any, formValues: any) => {\n    let invalids = [];\n    let someValid = false;\n    for(let i in validationFuncs) {\n        const validation = validationFuncs[i](val, formValues);\n        if (validation != undefined) invalids.push(validation);\n        else someValid = true;\n    };\n    if (someValid) return undefined;\n    return invalids.join('or ');\n};\n\nexport const validationAnd = (...validationFuncs: Validation<any>[]) => (val: any, formValues: any) => {\n    for(let i in validationFuncs) {\n        const validation = validationFuncs[i](val, formValues);\n        if (validation != undefined) return validation;\n        };\n    return undefined;\n};\n\nexport const validations = {\n    noEmpty: (val: any) => (val === undefined || val === null || val.toString() === '') ? 'This cannot be empty': undefined,\n    lessThan: (x: number) => (val: any) => val >= x ? 'Must be less than ' + x : undefined,\n    greaterThan: (x: number) => (val: any) => val <= x ? 'Must be greater than ' + x : undefined,\n    equalTo: (x: number) => (val: any) => val != x ? 'Must be equal to ' + x : undefined,\n    lengthEquals: (x: number) => (val: any) => val.toString().length != x ? 'Length should be equal to ' + x : undefined,\n    lengthLessThan: (x: number) => (val: any) => val.toString().length >= x ? 'Length should be less than ' + x : undefined,\n    lengthGreaterThan: (x: number) => (val: any) => val.toString().length <= x ? 'Length should be greater than ' + x : undefined,\n}\n\nexport const and = (...dispConds: DisplayCondition<any>[]) => (formValues: any) =>\n        dispConds.reduce((acc: boolean, cond) => acc && cond(formValues), true);\n\nexport const filterObject = (obj: any, f: (k: string, v: any) => boolean) => {\n    return Object.keys(obj).reduce(\n        (acc, key) => f(key, obj[key]) ? ({...acc, [key]: obj[key] }) : acc,\n        {}\n    );\n};\n","import React from 'react';\nimport { Row, Col, Form as BForm, Input, Label, FormGroup, Button } from 'reactstrap';\n\nimport { Layout, UseForm, Schema, SchemaSpec, LayoutElement, ProcessedLayoutRow } from './types';\n\nimport './style.css';\n\ntype FormProps<T> = {\n    form: UseForm<T>;\n    schema: Schema<T>;\n    layout: Layout<T>;\n    submitCallback: (elem: T) => void;\n    actionName: string;\n    actions?: {\n        name: string;\n        callback: (elem: T) => void;\n        color?: \"primary\" | \"success\" | \"danger\" | \"warning\";\n    }[];\n    disabled?: boolean;\n    actionsTop?: boolean;\n};\n\ninterface WrappedInputProps<T> {\n    name: keyof T; // TODO: make this generic\n    onChange: (ev: React.FormEvent<HTMLInputElement>) => void;\n    schema: SchemaSpec<T>;\n    value: any;\n    formValues: T;\n    error?: string;\n}\n\nfunction WrappedInput<T> (props: WrappedInputProps<T>) {\n    const { name, schema, value, formValues, error, ...other } = props;\n    const renderer = schema.valueRenderer || (x => x);\n    const renderValue = renderer(value);\n\n    if(schema.displayCondition && !schema.displayCondition(formValues)) {\n        return null;\n    }\n    if (schema.type === \"select\") {\n        return (\n            <React.Fragment>\n                <Label>\n                    {schema.label}{ schema.required && <span className=\"input-error\">*</span> }\n                    <small className=\"input-error\">{error}</small>\n                </Label>\n                <Input\n                    name={name as string}\n                    value={renderValue}\n                    type=\"select\"\n                    invalid={!!error}\n                    {...other}\n                >\n                {\n                    (schema.options || []).map(x => (\n                        <option key={x.value} value={x.value}>\n                            {x.label}\n                        </option>\n                    ))\n                }\n                </Input>\n            </React.Fragment>\n        );\n    }\n    if (schema.type === 'checkbox') {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input\n                        type=\"checkbox\"\n                        invalid={!!error}\n                        checked={renderValue}\n                        {...other}\n                    />{' '}\n                    {schema.label}{ schema.required && <span className=\"input-error\">*</span> }\n                </Label>\n            </FormGroup>\n        );\n    }\n    if (schema.type === 'label') {\n        return <h5 style={{marginBottom: \"-8px\", marginTop: \"8px\"}}>{schema.label}</h5>;\n    }\n    return (\n        <React.Fragment>\n            <Label>\n                {schema.label}{ schema.required && <span className=\"input-error\">*</span> }\n                <small className=\"input-error\">{error}</small>\n            </Label>\n        <Input\n            name={name as string}\n            value={renderValue}\n            type={schema.type}\n            placeholder={schema.placeholder}\n            invalid={!!error}\n            {...other}\n        />\n        </React.Fragment>\n    );\n};\n\n\nconst Form: <T>(_: FormProps<T>) => React.ReactElement<FormProps<T>> = (props) => {\n    const {\n        submitCallback, layout, schema, form,\n        disabled, actions,\n        actionName, actionsTop\n    } = props;\n    const { formValues, formErrors, onChange, onSubmit } = form;\n    // TODO: use formErrors\n    type FormType = typeof formValues;\n\n    const processRow = <T extends unknown>(row: LayoutElement<T>[], fullWidth: number): ProcessedLayoutRow<T> => {\n        if(typeof row == \"string\") return [[row, fullWidth]];\n        const width = fullWidth/row.length;\n        return row.map(item => processRow(item as Array<keyof T>, width)).flat();\n    };\n    React.useEffect(() => {\n        form.setSchema(schema);\n    }, []);\n    const processedLayout = layout.map(row => processRow<FormType>(row, 12));\n    const buttons = (\n        <React.Fragment>\n        { actionName && <Button color=\"success\" style={{marginRight: '3px'}}>{actionName}</Button> }\n        {\n            (actions||[]).map(action => (\n                <Button\n                    key={action.name}\n                    type=\"button\"\n                    color={action.color || \"primary\"}\n                    onClick={() => action.callback(formValues)}\n                    style={{marginRight:'3px'}}\n                >\n                    {action.name}\n                </Button>\n            ))\n        }\n        </React.Fragment>\n    );\n    return (\n        <BForm className=\"tf-form\" onSubmit={onSubmit(submitCallback)}>\n            <fieldset disabled={!!disabled}>\n            {actionsTop && <React.Fragment>{buttons}<hr/></React.Fragment>}\n            {\n                processedLayout.map((rows, i: number) => (\n                    <Row key={i}>\n                    {\n                        rows.map(([fieldName, width]: [any, number]) => (\n                            <Col md={width} key={fieldName as string}>\n                            <FormGroup>\n                                <WrappedInput<FormType>\n                                    schema={schema[fieldName as (keyof FormType)]}\n                                    name={fieldName}\n                                    value={formValues[fieldName as (keyof FormType)]}\n                                    onChange={onChange(fieldName, schema[fieldName as (keyof FormType)].valueProcessor)}\n                                    formValues={formValues}\n                                    error={formErrors[fieldName as (keyof FormType)]}\n                                />\n                            </FormGroup>\n                            </Col>\n                        ))\n                    }\n                    </Row>\n                ))\n            }\n            {!actionsTop && <React.Fragment><hr />{buttons}</React.Fragment>}\n            </fieldset>\n        </BForm>\n    );\n}\n\nexport default Form;\n","import React from 'react';\nimport { UseForm, Schema, Validation } from './types';\nimport { filterObject, validations, validationAnd } from './utils';\n\ntype Errors<T> = {\n    [K in keyof T]?: string;\n};\n\nconst flatifyValues = (obj: any): any => {\n    const flatVals: { [key: string]: any } = {};\n    Object.entries(obj).forEach(([k, v]: any[]) => {\n        if (v && v.constructor === Object) {\n            const flatified = flatifyValues(v);\n            Object.entries(flatified).forEach(([kk, vv]) => {\n                flatVals[k + '.' + kk] = vv;\n            });\n        } else {\n            flatVals[k] = v;\n        }\n    });\n    return flatVals;\n};\n\nconst nestifyValues = (obj: { [key: string]: any }): any => {\n    // NOTE: this function does heavy mutation\n    const nestedValues: { [key: string]: any } = {};\n    Object.entries(obj).forEach(([k, v]) => {\n        const splitted = k.split('.');\n        if (splitted.length === 1) {\n            nestedValues[k] = v;\n        } else {\n            let latestObj = nestedValues;\n            splitted.slice(0, splitted.length - 1).forEach((kk) => {\n                const tmp = latestObj[kk] || {};\n                latestObj[kk] = tmp;\n                latestObj = tmp;\n            });\n            latestObj[splitted[splitted.length - 1]] = v;\n        }\n    });\n    return nestedValues;\n};\n\nexport const useForm = <T>(initvalues: T, _schema?: Schema<any>) => {\n    // eslint:disable-next-line\n    const [formValues, _setFormValues] = React.useState<T>(\n        flatifyValues(initvalues)\n    ); // TODO: flatify is complicating the typing as it allows for nesting. Handle this gracefully\n    // eslint:disable-next-line\n    const [resetValues, setResetValues] = React.useState<T>(\n        flatifyValues(initvalues)\n    ); // TODO: flatify is complicating the typing as it allows for nesting. Handle this gracefully\n    const [formErrors, setFormErrors] = React.useState<Errors<T>>({});\n    const [schema, setSchema] = React.useState<Schema<T> | undefined>(_schema);\n    const [dirty, setDirty] = React.useState<T>({} as T);\n\n    const validateAndSetErrors = () => {\n        if (schema) {\n            const errs = Object.keys(schema).reduce((acc, key) => {\n                const requiredValidation = schema[key as keyof T].required\n                    ? validations.noEmpty\n                    : () => undefined;\n                const explicitValidation = schema[key as keyof T].validation\n                    ? schema[key as keyof T].validation\n                    : () => undefined;\n                const fieldValidation = validationAnd(\n                    requiredValidation,\n                    explicitValidation as Validation<T>\n                );\n                const validation = fieldValidation(\n                    formValues[key as keyof T],\n                    formValues\n                );\n                if (validation !== undefined) {\n                    return { ...acc, [key]: validation };\n                }\n                return acc;\n            }, {});\n            if (Object.keys(errs).length !== 0) {\n                setFormErrors(errs);\n                return false;\n            }\n        }\n        return true;\n    };\n\n    // eslint:disable-next-line\n    const setFormValues = (x: any) => _setFormValues(flatifyValues(x));\n\n    const onSubmit =\n        (callback: (arg0: T) => void) =>\n        (ev: React.FormEvent<HTMLFormElement>) => {\n            ev.preventDefault();\n            const valid = validateAndSetErrors();\n            if (!valid) return;\n            // Filter form values only if display condition does not return false\n            if (schema) {\n                const filtered = filterObject(\n                    formValues,\n                    (key: string, _: any) => {\n                        // eslint:disable-next-line\n                        return (\n                            schema === undefined ||\n                            schema[key as keyof T]?.displayCondition ===\n                                undefined ||\n                            schema[key].displayCondition(formValues)\n                        );\n                    }\n                );\n                callback({ ...initvalues, ...nestifyValues(filtered) });\n            } else {\n                // eslint:disable-next-line\n                callback(nestifyValues(formValues)); // TODO: gracefully handle nested type\n            }\n        };\n    const resetForm = () => {\n        setFormValues(resetValues);\n    };\n    return {\n        formValues,\n        formErrors,\n        onChange:\n            (name: keyof T, valueProcessor?: (_: any, formVals: any) => any) =>\n            (ev: React.FormEvent<HTMLInputElement>) => {\n                const value =\n                    ev.currentTarget.type === 'checkbox'\n                        ? ev.currentTarget.checked\n                        : ev.currentTarget.value;\n                const valProcessor = valueProcessor || ((x) => x);\n                setDirty({ ...dirty, [name]: true });\n                setFormValues({\n                    ...formValues,\n                    [name]: valProcessor(value, formValues)\n                });\n                setFormErrors({ ...formErrors, [name]: undefined });\n            },\n        onSubmit,\n        updateForm: (newVal: T) => setFormValues(newVal),\n        resetForm,\n        resetValues,\n        setFormValues,\n        setSchema,\n        setResetValues\n    } as UseForm<T>;\n};\n","import React from 'react';\nimport { Row, Col } from 'reactstrap';\n\nimport { BSForm, BSTypes as B, validations, useForm } from 'bs-form';\nimport 'bs-form/dist/index.css'\n\n\ninterface User {\n    name: string;\n    age: number;\n    height: number;\n    address: string;\n    gender: string;\n    hairLength: number;\n    fileAttachments: any;\n}\n\nconst schema: B.Schema<User> = {\n    name: { type: \"text\", label: \"Your name\", required: true },\n    age: { type: \"number\", label: \"Your age\", required: true, validation: validations.greaterThan(18), },\n    height: {\n        type: \"number\", label: \"Your Height\", required: true,\n        validation: (val) => (val < 3 || val > 7) && \"You can't be below 3 feet and above 7 feet\",\n    },\n    address: { type: \"text\", label: \"Address\", required: true },\n    gender: {\n        type: \"select\",\n        label: \"Gender\",\n        options: [\n            { label: \"--Select--\", value: \"\" },\n            { label: \"Male\", value: \"male\" },\n            { label: \"Female\", value: \"female\" },\n            { label: \"Don't Disclose\", value: \"no_disclose\" },\n        ],\n    },\n    hairLength: {\n        type: \"number\",\n        label: \"Hair Length(cms)\",\n        displayCondition: (otherValues: User) => otherValues.gender != \"no_disclose\" && !!otherValues.gender,\n        validation: (val, otherValues: User) => otherValues.gender == 'male'\n                                                ? (val > 10) && \"A guy can't have more than 10 cms long\"\n                                                : (val < 10) && \"A girl can't have less than 10 cms long\"\n    },\n    fileAttachments:{\n        type: \"file\",\n        label: \"Select your files\"\n\n    }\n};\n\nconst layout: B.Layout<User> = [\n    ['name'],\n    ['age', 'height'],\n    ['address'],\n    ['gender', 'hairLength']\n];\n\n\nconst App: React.FC = () => {\n    const onSubmit = () => { alert('submitted!!');};\n    const initialValues: User = {} as User;\n    const form = useForm(initialValues, schema);\n    console.warn(form.formErrors);\n    return (\n        <Row>\n            <Col md=\"3\" />\n            <Col md=\"6\">\n                <h2> My form</h2>\n                <BSForm<User>\n                    form={form}\n                    schema={schema}\n                    layout={layout}\n                    submitCallback={onSubmit}\n                    actionName=\"Check!\"\n                />\n            </Col>\n            <Col md=\"3\" />\n        </Row>\n    );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}